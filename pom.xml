<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>dk.aau.cs_24_sw_4_16.carl</groupId>
  <artifactId>carl</artifactId>
  <version>1.0-SNAPSHOT</version>

  <name>CARL: A Roguelike Language</name>
  <url>https://github.com/VinceAAU/P4</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>21</maven.compiler.source>
    <maven.compiler.target>21</maven.compiler.target>
  </properties>

  <dependencies>
    <!-- Used for the getters and setters -->
    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <version>1.18.30</version>
      <scope>provided</scope>
    </dependency>

    <!-- Antlr stuff -->
    <dependency>
      <groupId>org.antlr</groupId>
      <artifactId>antlr4-runtime</artifactId>
      <version>4.13.1</version>
    </dependency>
    <dependency>
      <groupId>org.antlr</groupId>
      <artifactId>antlr4</artifactId>
      <version>4.13.1</version>
      <scope>provided</scope>
    </dependency>

    <!-- Used for testing -->
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter</artifactId>
      <version>5.9.1</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <!-- The assembly plugin, dictates how the resulting .jar looks -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-assembly-plugin</artifactId>
        <version>3.3.0</version>

        <executions>
          <execution>
            <phase>package</phase> <!-- This means that the assembler runs under the package phase -->
            <goals>
              <goal>single</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <descriptorRefs>
            <descriptorRef>jar-with-dependencies</descriptorRef> <!-- This means that we include antlr in the jar itself -->
          </descriptorRefs>
          <archive>
            <manifest> <!-- Configures MANIFEST.MF -->
              <mainClass>${project.groupId}.Main</mainClass> <!-- Specifies what our main class is -->
            </manifest>
          </archive>
          <appendAssemblyId>false</appendAssemblyId> <!-- If you set this to true, two jars will be generated: One with and one without antlr -->
        </configuration>
      </plugin>

      <!-- Plugin for automatically generating antlr files -->
      <plugin>
        <groupId>org.antlr</groupId>
        <artifactId>antlr4-maven-plugin</artifactId>
        <version>4.13.1</version>
        <configuration>
          <visitor>true</visitor> <!-- Makes sure that the visitor classes are generated -->
        </configuration>
        <executions>
          <execution>
            <id>antlr</id>
            <goals>
              <goal>antlr4</goal> <!-- I guess this means that this can be run with `mvn antlr4`, but I haven't actually checked -->
            </goals>
          </execution>
        </executions>
      </plugin>
        <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-compiler-plugin</artifactId>
            <configuration>
                <source>21</source>
                <target>21</target>
            </configuration>
        </plugin>
    </plugins>
  </build>
</project>
